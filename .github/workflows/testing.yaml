name: Testing

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PYTHON_VERSION: 3.12.1

jobs:
  pre-commit:
    name: "Linter with pre-commit"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          check-latest: true

      - name: Run pre-commit
        uses: pre-commit/action@v3.0.0

  black:
    name: "Linter with black"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          check-latest: true

      - name: Cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: "Installing poetry"
        run: pip install poetry

      - name: "Installing dependencies"
        run: |
          poetry config virtualenvs.create false
          poetry install

      - name: Linter with black
        run: |
          poetry run black --check .


  ruff:
    name: "Linter with ruff"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          check-latest: true

      - name: Cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: "Installing poetry"
        run: pip install poetry

      - name: "Installing poetry"
        run: |
          poetry config virtualenvs.create false
          poetry install

      - name: Linter with ruff
        run: |
          poetry run ruff check .


  mypy:
    name: "Linter with mypy"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          check-latest: true

      - name: Cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: "Installing poetry"
        run: pip install poetry

      - name: "Installing dependencies"
        run: |
          poetry config virtualenvs.create false
          poetry install

      - name: Linter with mypy
        run: |
          poetry run mypy .

  test:
    name: "Testing code"
    runs-on: ubuntu-latest
    needs: [pre-commit, black, ruff, mypy]
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          check-latest: true

      - name: Cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Set current date as env variable
        run: echo "NOW=$(date +'%Y-%m-%d-%H-%M-%S')" >> $GITHUB_ENV

      - name: "Installing poetry"
        run: pip install poetry

      - name: "Installing dependencies"
        run: |
          poetry config virtualenvs.create false
          poetry install --with dev

      - name: "Testing code"
        run: |
          poetry run coverage run -m pytest
          poetry run coverage html --title="FastID"
          poetry run coverage xml

      - name: "Upload report"
        uses: actions/upload-artifact@v3
        with:
          name: coverage-geoip-${{ env.NOW }}.zip
          path: |
            htmlcov/
          retention-days: 90

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: "Report coverage"
        run: |
          poetry run coverage report --fail-under=100
